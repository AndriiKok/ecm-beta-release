// albatross

std := import('std')
str := import('str')
fmt := import('fmt')
fs := import('fs')
path := import('path')
http := import('http')

Port := 9888
StaticDir := './static'
DataFile := './data/db.json'

// create DataFile if not already exists
if fs.statFile(DataFile) = ? -> {
	if fs.writeFile(DataFile, '{ "categories": [], "tasks": [] }') = ? -> {
		std.println('error: could not create db')
		exit(1)
	}
}

server := http.Server()

fn err(msg) {
	status: 500
	headers: { 'Content-Type': http.MimeTypes.txt }
	body: msg
}

fn serveIndex(end) with fs.readFile(path.join(StaticDir, 'dyn-index.html')) fn(file) if file {
	? -> end(http.NotFound)
	_ -> with fs.readFile(DataFile) fn(dataFile) if dataFile {
		? -> end(http.NotFound)
		_ -> end({
			status: 200
			headers: { 'Content-Type': http.MimeTypes.html }
			body: file |> fmt.format({ preload: dataFile })
		})
	}
}

with server.route('/tasks') fn(params) fn(req, end) if req.method {
	'GET' -> with fs.readFile(DataFile) fn(file) if file {
		? -> end(http.NotFound)
		_ -> end({
			status: 200
			headers: { 'Content-Type': http.MimeTypes.json }
			body: file
		})
	}
	'PUT' -> with fs.writeFile(DataFile, req.body) fn(res) if res {
		? -> end({
			status: 500
			headers: { 'Content-Type': http.MimeTypes.txt }
			body: 'error: could not save'
		})
		_ -> end({
			status: 201
			headers: { 'Content-Type': http.MimeTypes.txt }
			body: ''
		})
	}
	_ -> end(http.MethodNotAllowed)
}

with server.route('/*staticPath') fn(params) {
	http.handleStatic(path.join(StaticDir, params.staticPath))
}

with server.route('/') fn(params) fn(req, end) if req.method {
	'GET' -> serveIndex(end)
	_ -> end(http.MethodNotAllowed)
}

server.start(Port)
std.println('Albatross running at port', Port)

